"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const deeplint_1 = require("../lib/deeplint");
const figures = require("figures");
const chalk = require("chalk");
const fs = require("fs");
const constant_1 = require("../lib/constant");
const yaml_reader_1 = require("../lib/shared/yaml-reader");
let Check = /** @class */ (() => {
    class Check extends command_1.Command {
        async run() {
            const { flags } = this.parse(Check);
            try {
                this.log(` ${figures.tick} ${chalk.green.bold('Initializing DeepLint')} \n`);
                const deeplint = await deeplint_1.Deeplint.build();
                this.log(` ${figures.tick} ${chalk.green.bold('Loading Snapshot')} \n`);
                const snapshots = flags.snapshot ? yaml_reader_1.default.load(flags.snapshot) : await deeplint.snap();
                this.log(` ${figures.tick} ${chalk.green.bold('Checking...')} \n`);
                const result = await deeplint.check(snapshots);
                const out = flags.out || constant_1.DEFAULT_CHECK_OUTPUT;
                this.log(` ${figures.tick} ${chalk.green.bold('Outputting to ')} ${chalk.blue.bold(out)}\n`);
                fs.writeFileSync(out, JSON.stringify(result));
            }
            catch (error) {
                this.error(error);
            }
        }
    }
    Check.description = 'Execute checking plan';
    Check.flags = {
        help: command_1.flags.help({ char: 'h' }),
        snapshot: command_1.flags.string({ char: 's', description: 'Snapshot file' }),
        out: command_1.flags.string({ char: 'o', description: 'Output file' }),
    };
    return Check;
})();
exports.default = Check;
