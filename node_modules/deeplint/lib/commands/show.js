"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const deeplint_1 = require("../lib/deeplint");
const chalk = require("chalk");
const figures = require("figures");
const _ = require("lodash");
const yaml_reader_1 = require("../lib/shared/yaml-reader");
const constant_1 = require("../lib/constant");
let Show = /** @class */ (() => {
    class Show extends command_1.Command {
        async run() {
            const { flags } = this.parse(Show);
            try {
                this.log(` ${figures.tick} ${chalk.green.bold('Initializing DeepLint')} \n`);
                const deeplint = await deeplint_1.Deeplint.build();
                this.log(` ${figures.tick} ${chalk.green.bold('Retrieving modules and policies')} \n`);
                const policies = deeplint.getPoliciesMeta();
                this.log(` ${figures.tick} ${chalk.green.bold('Showing...')} \n`);
                if (flags.policy) {
                    const policy = policies[flags.policy];
                    if (policy) {
                        this.showPolicy(policies[constant_1.ROOT_MODULE_NAME][flags.policy]);
                    }
                    else {
                        this.error(`Can not find policy: ${chalk.red(flags.policy)}`);
                    }
                }
                else if (flags.snapshot) {
                    const snapshot = yaml_reader_1.default.load(flags.snapshot);
                    this.log(JSON.stringify(snapshot, null, 4));
                }
                else if (flags.check) {
                    const check = yaml_reader_1.default.load(flags.check);
                    this.log(JSON.stringify(check, null, 4));
                }
                else {
                    this.showSummary(policies);
                }
            }
            catch (error) {
                this.error(error);
            }
        }
        showSummary(result) {
            const Table = require('cli-table');
            const table = new Table({
                head: ['Module', 'Policy', 'Providers', 'Rules', 'Actions'],
            });
            for (const moduleKey of Object.keys(result)) {
                for (const policyKey of Object.keys(result[moduleKey])) {
                    table.push([
                        chalk.blue(moduleKey),
                        chalk.blue(policyKey),
                        _.size(result[moduleKey][policyKey].policySpec.scanners),
                        _.size(result[moduleKey][policyKey].policySpec.rules),
                        _.size(result[moduleKey][policyKey].policySpec.actions),
                    ]);
                }
            }
            this.log(table.toString());
        }
        showPolicy(policyMeta) {
            const Table = require('cli-table');
            const table = new Table();
            table.push({ Name: policyMeta.policyName }, { Path: policyMeta.policyPath }, { Rules: JSON.stringify(policyMeta.policySpec.rules, null, 4) }, { Providers: JSON.stringify(policyMeta.policySpec.scanners, null, 4) }, { Actions: JSON.stringify(policyMeta.policySpec.actions, null, 4) }, { Inputs: JSON.stringify(policyMeta.policySpec.inputs, null, 4) }, { Configs: JSON.stringify(policyMeta.policyConfig, null, 4) });
            this.log(table.toString());
        }
    }
    Show.description = 'Display the modules, policies, snapshots and checking results in the human-readable format';
    Show.flags = {
        help: command_1.flags.help({ char: 'h' }),
        // flag with no value (-f, --force)
        force: command_1.flags.boolean({ char: 'f' }),
        policy: command_1.flags.string({ char: 'p' }),
        module: command_1.flags.string({ char: 'm' }),
        snapshot: command_1.flags.string({ char: 's' }),
        check: command_1.flags.string({ char: 'c' }),
    };
    return Show;
})();
exports.default = Show;
