"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Deeplint = void 0;
const yaml_reader_1 = require("./shared/yaml-reader");
const path = require("path");
const fs = require("fs");
const constant_1 = require("./constant");
const module_1 = require("./module/module");
const validate_1 = require("./policy/validate");
class Deeplint {
    constructor(deepLintConfig, modules) {
        this.deepLintConfig = deepLintConfig;
        this.modules = modules;
    }
    static async build(configFile) {
        const configPath = path.resolve(configFile || constant_1.DEFAULT_DEEPLINT_CONFIG_FILE_NAME);
        if (fs.existsSync(configPath)) {
            const deepLintConfig = yaml_reader_1.default.load(configPath);
            if (!validate_1.validate('DeepLintConfig', deepLintConfig)) {
                throw new Error(`DeepLint config ${JSON.stringify(deepLintConfig)} does not follow the required format`);
            }
            const modules = {};
            modules[constant_1.ROOT_MODULE_NAME] = await module_1.Module.build({
                uses: constant_1.ROOT_MODULE_NAME,
                version: '0.0.1',
            }, constant_1.ROOT_MODULE_NAME);
            if (deepLintConfig.modules) {
                await Promise.all(Object.keys(deepLintConfig.modules).map(async (moduleKey) => {
                    if (deepLintConfig.modules && deepLintConfig.modules[moduleKey]) {
                        modules[moduleKey] = await module_1.Module.build(deepLintConfig.modules[moduleKey], moduleKey);
                    }
                }));
            }
            return new Deeplint(deepLintConfig, modules);
        }
        throw new Error('Can not find DeepLint config file');
    }
    getPoliciesMeta() {
        const res = {};
        Object.keys(this.modules).map(async (moduleKey) => {
            const module = this.modules[moduleKey];
            if (module === undefined) {
                throw (new Error(`Can not locate module: ${moduleKey}`));
            }
            res[moduleKey] = module.getPoliciesMeta();
        });
        return res;
    }
    async snap() {
        const res = {};
        await Promise.all(Object.keys(this.modules).map(async (moduleKey) => {
            const module = this.modules[moduleKey];
            if (module === undefined) {
                throw (new Error(`Can not locate module: ${moduleKey}`));
            }
            res[moduleKey] = await module.snap();
        }));
        return res;
    }
    async check(snapshots) {
        const res = {};
        await Promise.all(Object.keys(snapshots).map(async (moduleKey) => {
            const module = this.modules[moduleKey];
            if (module === undefined) {
                throw (new Error(`Can not locate module: ${module}`));
            }
            res[moduleKey] = await module.check(snapshots[moduleKey]);
        }));
        return res;
    }
    async fix(checkingResults) {
        const res = {};
        await Promise.all(Object.keys(checkingResults).map(async (moduleKey) => {
            const module = this.modules[moduleKey];
            if (module === undefined) {
                throw (new Error(`Can not locate module: ${moduleKey}`));
            }
            res[moduleKey] = await module.fix(checkingResults[moduleKey]);
        }));
        return res;
    }
}
exports.Deeplint = Deeplint;
