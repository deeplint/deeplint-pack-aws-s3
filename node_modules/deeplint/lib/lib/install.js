"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.install = exports.checkoutFromGit = void 0;
const constant_1 = require("./constant");
const fs = require("fs");
const path = require("path");
const yaml_reader_1 = require("./shared/yaml-reader");
const isomorphic_git_1 = require("isomorphic-git");
const node_1 = require("isomorphic-git/http/node");
const path_1 = require("./shared/path");
async function checkoutFromGit(gitURL, version, dir) {
    await isomorphic_git_1.default.clone({
        fs,
        http: node_1.default,
        dir: dir,
        url: gitURL,
        depth: 1,
    });
    await isomorphic_git_1.default.checkout({
        fs,
        dir: dir,
        ref: version,
    });
}
exports.checkoutFromGit = checkoutFromGit;
async function install(configFile) {
    const configPath = path.resolve(configFile || constant_1.DEFAULT_DEEPLINT_CONFIG_FILE_NAME);
    if (fs.existsSync(configPath)) {
        const deepLintConfig = yaml_reader_1.default.load(configPath);
        if (deepLintConfig.policies) {
            await Object.keys(deepLintConfig.policies).map(async (key) => {
                if (deepLintConfig.policies && deepLintConfig.policies[key].uses.toLowerCase().startsWith('http') &&
                    deepLintConfig.policies[key].uses.toLowerCase().endsWith('git')) {
                    const dir = path_1.resolvePolicyPath(constant_1.ROOT_MODULE_NAME, key, deepLintConfig.policies[key].uses.toLowerCase());
                    await checkoutFromGit(deepLintConfig.policies[key].uses, deepLintConfig.policies[key].version, dir);
                }
            });
        }
        if (deepLintConfig.modules) {
            await Object.keys(deepLintConfig.modules).map(async (moduleKey) => {
                if (deepLintConfig.modules && deepLintConfig.modules[moduleKey].uses.toLowerCase().startsWith('http') &&
                    deepLintConfig.modules[moduleKey].uses.toLowerCase().endsWith('git') && deepLintConfig.modules[moduleKey].version) {
                    const dir = path_1.resolveModulePath(moduleKey, deepLintConfig.modules[moduleKey].uses.toLowerCase());
                    await checkoutFromGit(deepLintConfig.modules[moduleKey].uses, deepLintConfig.modules[moduleKey].version, dir);
                    const moduleSpec = yaml_reader_1.default.load(dir + path.sep + constant_1.DEFAULT_MODULE_SPEC_FILE_NAME);
                    if (moduleSpec.policies) {
                        await Object.keys(moduleSpec.policies).map(async (key) => {
                            if (deepLintConfig.policies && deepLintConfig.policies[key].uses.toLowerCase().startsWith('http') &&
                                deepLintConfig.policies[key].uses.toLowerCase().endsWith('git')) {
                                const dir = path_1.resolvePolicyPath(moduleKey, key, deepLintConfig.policies[key].uses.toLowerCase());
                                await checkoutFromGit(deepLintConfig.policies[key].uses, deepLintConfig.policies[key].version, dir);
                            }
                        });
                    }
                }
            });
        }
    }
}
exports.install = install;
