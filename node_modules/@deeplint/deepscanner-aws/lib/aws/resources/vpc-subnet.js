"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VPCSubnetProvider = void 0;
const aws_error_handler_1 = require("../helper/aws-error-handler");
const aws_provider_1 = require("../helper/aws-provider");
const _ = require("lodash");
class VPCSubnetProvider extends aws_provider_1.AwsProvider {
    collect(context) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.listAllSubnet(context);
        });
    }
    listAllSubnet(context) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = [];
            const serviceName = 'EC2';
            const regions = _.has(context, 'inputs.regions') ? context.inputs.regions : this.getRegions(serviceName);
            try {
                for (const region of regions) {
                    const ec2 = this.getClient(serviceName, region);
                    const subnetData = yield ec2.describeSubnets().promise();
                    if (subnetData && subnetData.Subnets) {
                        for (const subnet of subnetData.Subnets) {
                            if (subnet.SubnetId) {
                                result.push({
                                    name: subnet.SubnetId,
                                    type: VPCSubnetProvider.RESOURCE_TYPE,
                                    meta: {
                                        region: region,
                                    },
                                    properties: Object.assign({}, subnet),
                                });
                            }
                        }
                    }
                }
            }
            catch (error) {
                aws_error_handler_1.handle(error);
            }
            return result;
        });
    }
}
exports.VPCSubnetProvider = VPCSubnetProvider;
VPCSubnetProvider.RESOURCE_TYPE = 'aws::ec2::subnet';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnBjLXN1Ym5ldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hd3MvcmVzb3VyY2VzL3ZwYy1zdWJuZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsbUVBQXFEO0FBRXJELHlEQUFxRDtBQUVyRCw0QkFBNkI7QUFFN0IsTUFBYSxpQkFBa0IsU0FBUSwwQkFBVztJQUduQyxPQUFPLENBQUMsT0FBK0I7O1lBQ2xELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyQyxDQUFDO0tBQUE7SUFFYSxhQUFhLENBQUMsT0FBK0I7O1lBQ3pELE1BQU0sTUFBTSxHQUFlLEVBQUUsQ0FBQztZQUM5QixNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUM7WUFDMUIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDekcsSUFBSTtnQkFDRixLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtvQkFDNUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFZLENBQUM7b0JBQzNELE1BQU0sVUFBVSxHQUFrQyxNQUFNLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztvQkFDeEYsSUFBSSxVQUFVLElBQUksVUFBVSxDQUFDLE9BQU8sRUFBRTt3QkFDcEMsS0FBSyxNQUFNLE1BQU0sSUFBSSxVQUFVLENBQUMsT0FBTyxFQUFFOzRCQUN2QyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUU7Z0NBQ25CLE1BQU0sQ0FBQyxJQUFJLENBQUM7b0NBQ1YsSUFBSSxFQUFFLE1BQU0sQ0FBQyxRQUFRO29DQUNyQixJQUFJLEVBQUUsaUJBQWlCLENBQUMsYUFBYTtvQ0FDckMsSUFBSSxFQUFFO3dDQUNKLE1BQU0sRUFBRSxNQUFNO3FDQUNmO29DQUNELFVBQVUsb0JBQ0wsTUFBTSxDQUNWO2lDQUNGLENBQUMsQ0FBQzs2QkFDSjt5QkFDRjtxQkFDRjtpQkFDRjthQUNGO1lBQUMsT0FBTyxLQUFLLEVBQUU7Z0JBQ2QsMEJBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNmO1lBQ0QsT0FBTyxNQUFNLENBQUM7UUFDaEIsQ0FBQztLQUFBOztBQXBDSCw4Q0FxQ0M7QUFwQ3dCLCtCQUFhLEdBQUcsa0JBQWtCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoYW5kbGUgfSBmcm9tICcuLi9oZWxwZXIvYXdzLWVycm9yLWhhbmRsZXInO1xuaW1wb3J0ICogYXMgQVdTIGZyb20gJ2F3cy1zZGsnO1xuaW1wb3J0IHsgQXdzUHJvdmlkZXIgfSBmcm9tICcuLi9oZWxwZXIvYXdzLXByb3ZpZGVyJztcbmltcG9ydCB7IFJlc291cmNlIH0gZnJvbSAnQGRlZXBsaW50L2RlZXBzY2FubmVyLWJhc2UnO1xuaW1wb3J0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcblxuZXhwb3J0IGNsYXNzIFZQQ1N1Ym5ldFByb3ZpZGVyIGV4dGVuZHMgQXdzUHJvdmlkZXIge1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFJFU09VUkNFX1RZUEUgPSAnYXdzOjplYzI6OnN1Ym5ldCc7XG5cbiAgcHVibGljIGFzeW5jIGNvbGxlY3QoY29udGV4dDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSk6IFByb21pc2U8UmVzb3VyY2VbXT4ge1xuICAgIHJldHVybiB0aGlzLmxpc3RBbGxTdWJuZXQoY29udGV4dCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGxpc3RBbGxTdWJuZXQoY29udGV4dDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSk6IFByb21pc2U8UmVzb3VyY2VbXT4ge1xuICAgIGNvbnN0IHJlc3VsdDogUmVzb3VyY2VbXSA9IFtdO1xuICAgIGNvbnN0IHNlcnZpY2VOYW1lID0gJ0VDMic7XG4gICAgY29uc3QgcmVnaW9ucyA9IF8uaGFzKGNvbnRleHQsICdpbnB1dHMucmVnaW9ucycpID8gY29udGV4dC5pbnB1dHMucmVnaW9ucyA6IHRoaXMuZ2V0UmVnaW9ucyhzZXJ2aWNlTmFtZSk7XG4gICAgdHJ5IHtcbiAgICAgIGZvciAoY29uc3QgcmVnaW9uIG9mIHJlZ2lvbnMpIHtcbiAgICAgICAgY29uc3QgZWMyID0gdGhpcy5nZXRDbGllbnQoc2VydmljZU5hbWUsIHJlZ2lvbikgYXMgQVdTLkVDMjtcbiAgICAgICAgY29uc3Qgc3VibmV0RGF0YTogQVdTLkVDMi5EZXNjcmliZVN1Ym5ldHNSZXN1bHQgPSBhd2FpdCBlYzIuZGVzY3JpYmVTdWJuZXRzKCkucHJvbWlzZSgpO1xuICAgICAgICBpZiAoc3VibmV0RGF0YSAmJiBzdWJuZXREYXRhLlN1Ym5ldHMpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IHN1Ym5ldCBvZiBzdWJuZXREYXRhLlN1Ym5ldHMpIHtcbiAgICAgICAgICAgIGlmIChzdWJuZXQuU3VibmV0SWQpIHtcbiAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgIG5hbWU6IHN1Ym5ldC5TdWJuZXRJZCxcbiAgICAgICAgICAgICAgICB0eXBlOiBWUENTdWJuZXRQcm92aWRlci5SRVNPVVJDRV9UWVBFLFxuICAgICAgICAgICAgICAgIG1ldGE6IHtcbiAgICAgICAgICAgICAgICAgIHJlZ2lvbjogcmVnaW9uLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgICAgLi4uc3VibmV0LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBoYW5kbGUoZXJyb3IpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG4iXX0=