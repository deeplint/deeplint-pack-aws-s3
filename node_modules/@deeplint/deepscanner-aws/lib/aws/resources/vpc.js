"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VPCProvider = void 0;
const aws_error_handler_1 = require("../helper/aws-error-handler");
const aws_provider_1 = require("../helper/aws-provider");
const _ = require("lodash");
class VPCProvider extends aws_provider_1.AwsProvider {
    collect(context) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.listAllVpc(context);
        });
    }
    listAllVpc(context) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = [];
            const serviceName = 'EC2';
            const regions = _.has(context, 'inputs.regions') ? context.inputs.regions : this.getRegions(serviceName);
            try {
                for (const region of regions) {
                    const ec2 = this.getClient(serviceName, region);
                    const vpcsData = yield ec2.describeVpcs().promise();
                    if (vpcsData && vpcsData.Vpcs) {
                        for (const vpc of vpcsData.Vpcs) {
                            if (vpc.VpcId) {
                                result.push({
                                    name: vpc.VpcId,
                                    type: VPCProvider.RESOURCE_TYPE,
                                    meta: {
                                        region: region,
                                    },
                                    properties: Object.assign({}, vpc),
                                });
                            }
                        }
                    }
                }
            }
            catch (error) {
                aws_error_handler_1.handle(error);
            }
            return result;
        });
    }
}
exports.VPCProvider = VPCProvider;
VPCProvider.RESOURCE_TYPE = 'aws::ec2::vpc';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnBjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2F3cy9yZXNvdXJjZXMvdnBjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLG1FQUFxRDtBQUVyRCx5REFBcUQ7QUFFckQsNEJBQTZCO0FBRTdCLE1BQWEsV0FBWSxTQUFRLDBCQUFXO0lBRzdCLE9BQU8sQ0FBQyxPQUErQjs7WUFDbEQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2xDLENBQUM7S0FBQTtJQUVhLFVBQVUsQ0FBQyxPQUErQjs7WUFDdEQsTUFBTSxNQUFNLEdBQWUsRUFBRSxDQUFDO1lBQzlCLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQztZQUMxQixNQUFNLE9BQU8sR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUV6RyxJQUFJO2dCQUNGLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO29CQUM1QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQVksQ0FBQztvQkFDM0QsTUFBTSxRQUFRLEdBQStCLE1BQU0sR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO29CQUNoRixJQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsSUFBSSxFQUFFO3dCQUM3QixLQUFLLE1BQU0sR0FBRyxJQUFJLFFBQVEsQ0FBQyxJQUFJLEVBQUU7NEJBQy9CLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRTtnQ0FDYixNQUFNLENBQUMsSUFBSSxDQUFDO29DQUNWLElBQUksRUFBRSxHQUFHLENBQUMsS0FBSztvQ0FDZixJQUFJLEVBQUUsV0FBVyxDQUFDLGFBQWE7b0NBQy9CLElBQUksRUFBRTt3Q0FDSixNQUFNLEVBQUUsTUFBTTtxQ0FDZjtvQ0FDRCxVQUFVLG9CQUNMLEdBQUcsQ0FDUDtpQ0FDRixDQUFDLENBQUM7NkJBQ0o7eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7YUFDRjtZQUFDLE9BQU8sS0FBSyxFQUFFO2dCQUNkLDBCQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDZjtZQUNELE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUM7S0FBQTs7QUFyQ0gsa0NBc0NDO0FBckN3Qix5QkFBYSxHQUFHLGVBQWUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhhbmRsZSB9IGZyb20gJy4uL2hlbHBlci9hd3MtZXJyb3ItaGFuZGxlcic7XG5pbXBvcnQgKiBhcyBBV1MgZnJvbSAnYXdzLXNkayc7XG5pbXBvcnQgeyBBd3NQcm92aWRlciB9IGZyb20gJy4uL2hlbHBlci9hd3MtcHJvdmlkZXInO1xuaW1wb3J0IHsgUmVzb3VyY2UgfSBmcm9tICdAZGVlcGxpbnQvZGVlcHNjYW5uZXItYmFzZSc7XG5pbXBvcnQgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuXG5leHBvcnQgY2xhc3MgVlBDUHJvdmlkZXIgZXh0ZW5kcyBBd3NQcm92aWRlciB7XG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUkVTT1VSQ0VfVFlQRSA9ICdhd3M6OmVjMjo6dnBjJztcblxuICBwdWJsaWMgYXN5bmMgY29sbGVjdChjb250ZXh0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9KTogUHJvbWlzZTxSZXNvdXJjZVtdPiB7XG4gICAgcmV0dXJuIHRoaXMubGlzdEFsbFZwYyhjb250ZXh0KTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgbGlzdEFsbFZwYyhjb250ZXh0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9KTogUHJvbWlzZTxSZXNvdXJjZVtdPiB7XG4gICAgY29uc3QgcmVzdWx0OiBSZXNvdXJjZVtdID0gW107XG4gICAgY29uc3Qgc2VydmljZU5hbWUgPSAnRUMyJztcbiAgICBjb25zdCByZWdpb25zID0gXy5oYXMoY29udGV4dCwgJ2lucHV0cy5yZWdpb25zJykgPyBjb250ZXh0LmlucHV0cy5yZWdpb25zIDogdGhpcy5nZXRSZWdpb25zKHNlcnZpY2VOYW1lKTtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKGNvbnN0IHJlZ2lvbiBvZiByZWdpb25zKSB7XG4gICAgICAgIGNvbnN0IGVjMiA9IHRoaXMuZ2V0Q2xpZW50KHNlcnZpY2VOYW1lLCByZWdpb24pIGFzIEFXUy5FQzI7XG4gICAgICAgIGNvbnN0IHZwY3NEYXRhOiBBV1MuRUMyLkRlc2NyaWJlVnBjc1Jlc3VsdCA9IGF3YWl0IGVjMi5kZXNjcmliZVZwY3MoKS5wcm9taXNlKCk7XG4gICAgICAgIGlmICh2cGNzRGF0YSAmJiB2cGNzRGF0YS5WcGNzKSB7XG4gICAgICAgICAgZm9yIChjb25zdCB2cGMgb2YgdnBjc0RhdGEuVnBjcykge1xuICAgICAgICAgICAgaWYgKHZwYy5WcGNJZCkge1xuICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgbmFtZTogdnBjLlZwY0lkLFxuICAgICAgICAgICAgICAgIHR5cGU6IFZQQ1Byb3ZpZGVyLlJFU09VUkNFX1RZUEUsXG4gICAgICAgICAgICAgICAgbWV0YToge1xuICAgICAgICAgICAgICAgICAgcmVnaW9uOiByZWdpb24sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgICAuLi52cGMsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGhhbmRsZShlcnJvcik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbiJdfQ==