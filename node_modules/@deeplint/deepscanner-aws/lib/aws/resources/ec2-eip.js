"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EC2EIPProvider = void 0;
const aws_error_handler_1 = require("../helper/aws-error-handler");
const AWS = require("aws-sdk");
const aws_provider_1 = require("../helper/aws-provider");
const _ = require("lodash");
class EC2EIPProvider extends aws_provider_1.AwsProvider {
    collect(context) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.listAllAddresses(context);
        });
    }
    listAllAddresses(context) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = [];
            const serviceName = 'EC2';
            const regions = _.has(context, 'inputs.regions') ? context.inputs.regions : this.getRegions(serviceName);
            try {
                for (const region of regions) {
                    AWS.config.update({ region: region });
                    const ec2 = this.getClient(serviceName, region);
                    const eipAddressData = yield ec2.describeAddresses().promise();
                    if (eipAddressData && eipAddressData.Addresses) {
                        for (const address of eipAddressData.Addresses) {
                            if (address.PublicIp) {
                                result.push({
                                    name: address.PublicIp,
                                    type: EC2EIPProvider.RESOURCE_TYPE,
                                    meta: {
                                        region: region,
                                    },
                                    properties: Object.assign({}, address),
                                });
                            }
                        }
                    }
                }
            }
            catch (error) {
                aws_error_handler_1.handle(error);
            }
            return result;
        });
    }
}
exports.EC2EIPProvider = EC2EIPProvider;
EC2EIPProvider.RESOURCE_TYPE = 'aws::ec2::eip';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWMyLWVpcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hd3MvcmVzb3VyY2VzL2VjMi1laXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsbUVBQXFEO0FBQ3JELCtCQUErQjtBQUMvQix5REFBcUQ7QUFFckQsNEJBQTZCO0FBRTdCLE1BQWEsY0FBZSxTQUFRLDBCQUFXO0lBR2hDLE9BQU8sQ0FBQyxPQUErQjs7WUFDbEQsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEMsQ0FBQztLQUFBO0lBRWEsZ0JBQWdCLENBQUMsT0FBK0I7O1lBQzVELE1BQU0sTUFBTSxHQUFlLEVBQUUsQ0FBQztZQUM5QixNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUM7WUFDMUIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDekcsSUFBSTtnQkFDRixLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtvQkFDNUIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztvQkFDdEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFZLENBQUM7b0JBQzNELE1BQU0sY0FBYyxHQUFvQyxNQUFNLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO29CQUNoRyxJQUFJLGNBQWMsSUFBSSxjQUFjLENBQUMsU0FBUyxFQUFFO3dCQUM5QyxLQUFLLE1BQU0sT0FBTyxJQUFJLGNBQWMsQ0FBQyxTQUFTLEVBQUU7NEJBQzlDLElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRTtnQ0FDcEIsTUFBTSxDQUFDLElBQUksQ0FBQztvQ0FDVixJQUFJLEVBQUUsT0FBTyxDQUFDLFFBQVE7b0NBQ3RCLElBQUksRUFBRSxjQUFjLENBQUMsYUFBYTtvQ0FDbEMsSUFBSSxFQUFFO3dDQUNKLE1BQU0sRUFBRSxNQUFNO3FDQUNmO29DQUNELFVBQVUsb0JBQ0wsT0FBTyxDQUNYO2lDQUNGLENBQUMsQ0FBQzs2QkFDSjt5QkFDRjtxQkFDRjtpQkFDRjthQUNGO1lBQUMsT0FBTyxLQUFLLEVBQUU7Z0JBQ2QsMEJBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNmO1lBQ0QsT0FBTyxNQUFNLENBQUM7UUFDaEIsQ0FBQztLQUFBOztBQXJDSCx3Q0FzQ0M7QUFyQ3dCLDRCQUFhLEdBQUcsZUFBZSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFuZGxlIH0gZnJvbSAnLi4vaGVscGVyL2F3cy1lcnJvci1oYW5kbGVyJztcbmltcG9ydCAqIGFzIEFXUyBmcm9tICdhd3Mtc2RrJztcbmltcG9ydCB7IEF3c1Byb3ZpZGVyIH0gZnJvbSAnLi4vaGVscGVyL2F3cy1wcm92aWRlcic7XG5pbXBvcnQgeyBSZXNvdXJjZSB9IGZyb20gJ0BkZWVwbGludC9kZWVwc2Nhbm5lci1iYXNlJztcbmltcG9ydCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5cbmV4cG9ydCBjbGFzcyBFQzJFSVBQcm92aWRlciBleHRlbmRzIEF3c1Byb3ZpZGVyIHtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBSRVNPVVJDRV9UWVBFID0gJ2F3czo6ZWMyOjplaXAnO1xuXG4gIHB1YmxpYyBhc3luYyBjb2xsZWN0KGNvbnRleHQ6IHsgW2tleTogc3RyaW5nXTogYW55IH0pOiBQcm9taXNlPFJlc291cmNlW10+IHtcbiAgICByZXR1cm4gdGhpcy5saXN0QWxsQWRkcmVzc2VzKGNvbnRleHQpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBsaXN0QWxsQWRkcmVzc2VzKGNvbnRleHQ6IHsgW2tleTogc3RyaW5nXTogYW55IH0pOiBQcm9taXNlPFJlc291cmNlW10+IHtcbiAgICBjb25zdCByZXN1bHQ6IFJlc291cmNlW10gPSBbXTtcbiAgICBjb25zdCBzZXJ2aWNlTmFtZSA9ICdFQzInO1xuICAgIGNvbnN0IHJlZ2lvbnMgPSBfLmhhcyhjb250ZXh0LCAnaW5wdXRzLnJlZ2lvbnMnKSA/IGNvbnRleHQuaW5wdXRzLnJlZ2lvbnMgOiB0aGlzLmdldFJlZ2lvbnMoc2VydmljZU5hbWUpO1xuICAgIHRyeSB7XG4gICAgICBmb3IgKGNvbnN0IHJlZ2lvbiBvZiByZWdpb25zKSB7XG4gICAgICAgIEFXUy5jb25maWcudXBkYXRlKHsgcmVnaW9uOiByZWdpb24gfSk7XG4gICAgICAgIGNvbnN0IGVjMiA9IHRoaXMuZ2V0Q2xpZW50KHNlcnZpY2VOYW1lLCByZWdpb24pIGFzIEFXUy5FQzI7XG4gICAgICAgIGNvbnN0IGVpcEFkZHJlc3NEYXRhOiBBV1MuRUMyLkRlc2NyaWJlQWRkcmVzc2VzUmVzdWx0ID0gYXdhaXQgZWMyLmRlc2NyaWJlQWRkcmVzc2VzKCkucHJvbWlzZSgpO1xuICAgICAgICBpZiAoZWlwQWRkcmVzc0RhdGEgJiYgZWlwQWRkcmVzc0RhdGEuQWRkcmVzc2VzKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBhZGRyZXNzIG9mIGVpcEFkZHJlc3NEYXRhLkFkZHJlc3Nlcykge1xuICAgICAgICAgICAgaWYgKGFkZHJlc3MuUHVibGljSXApIHtcbiAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgIG5hbWU6IGFkZHJlc3MuUHVibGljSXAsXG4gICAgICAgICAgICAgICAgdHlwZTogRUMyRUlQUHJvdmlkZXIuUkVTT1VSQ0VfVFlQRSxcbiAgICAgICAgICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgICAgICAgICByZWdpb246IHJlZ2lvbixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICAgIC4uLmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGhhbmRsZShlcnJvcik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbiJdfQ==