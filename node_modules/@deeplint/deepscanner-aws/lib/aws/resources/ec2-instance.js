"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EC2InstanceProvider = void 0;
const aws_error_handler_1 = require("../helper/aws-error-handler");
const aws_provider_1 = require("../helper/aws-provider");
const _ = require("lodash");
class EC2InstanceProvider extends aws_provider_1.AwsProvider {
    collect(context) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.listAllInstance(context);
        });
    }
    listAllInstance(context) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = [];
            const serviceName = 'EC2';
            const regions = _.has(context, 'inputs.regions') ? context.inputs.regions : this.getRegions(serviceName);
            try {
                for (const region of regions) {
                    const ec2 = this.getClient(serviceName, region);
                    const ec2InstanceData = yield ec2.describeInstances().promise();
                    if (ec2InstanceData && ec2InstanceData.Reservations) {
                        for (const reservations of ec2InstanceData.Reservations) {
                            if (reservations.Instances) {
                                for (const instance of reservations.Instances) {
                                    result.push({
                                        name: instance.InstanceId ? instance.InstanceId : '',
                                        type: EC2InstanceProvider.RESOURCE_TYPE,
                                        meta: {
                                            region: region,
                                        },
                                        properties: Object.assign({}, instance),
                                    });
                                }
                            }
                        }
                    }
                }
            }
            catch (error) {
                aws_error_handler_1.handle(error);
            }
            return result;
        });
    }
}
exports.EC2InstanceProvider = EC2InstanceProvider;
EC2InstanceProvider.RESOURCE_TYPE = 'aws::ec2::instance';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWMyLWluc3RhbmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2F3cy9yZXNvdXJjZXMvZWMyLWluc3RhbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLG1FQUFxRDtBQUVyRCx5REFBcUQ7QUFFckQsNEJBQTZCO0FBRTdCLE1BQWEsbUJBQW9CLFNBQVEsMEJBQVc7SUFHckMsT0FBTyxDQUFDLE9BQStCOztZQUNsRCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkMsQ0FBQztLQUFBO0lBRWEsZUFBZSxDQUFDLE9BQStCOztZQUMzRCxNQUFNLE1BQU0sR0FBZSxFQUFFLENBQUM7WUFDOUIsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDO1lBQzFCLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3pHLElBQUk7Z0JBQ0YsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7b0JBQzVCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBWSxDQUFDO29CQUMzRCxNQUFNLGVBQWUsR0FBb0MsTUFBTSxHQUFHLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztvQkFDakcsSUFBSSxlQUFlLElBQUksZUFBZSxDQUFDLFlBQVksRUFBRTt3QkFDbkQsS0FBSyxNQUFNLFlBQVksSUFBSSxlQUFlLENBQUMsWUFBWSxFQUFFOzRCQUN2RCxJQUFJLFlBQVksQ0FBQyxTQUFTLEVBQUU7Z0NBQzFCLEtBQUssTUFBTSxRQUFRLElBQUksWUFBWSxDQUFDLFNBQVMsRUFBRTtvQ0FDN0MsTUFBTSxDQUFDLElBQUksQ0FBQzt3Q0FDVixJQUFJLEVBQUUsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRTt3Q0FDcEQsSUFBSSxFQUFFLG1CQUFtQixDQUFDLGFBQWE7d0NBQ3ZDLElBQUksRUFBRTs0Q0FDSixNQUFNLEVBQUUsTUFBTTt5Q0FDZjt3Q0FDRCxVQUFVLG9CQUNMLFFBQVEsQ0FDWjtxQ0FDRixDQUFDLENBQUM7aUNBQ0o7NkJBQ0Y7eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7YUFDRjtZQUFDLE9BQU8sS0FBSyxFQUFFO2dCQUNkLDBCQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDZjtZQUNELE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUM7S0FBQTs7QUF0Q0gsa0RBdUNDO0FBdEN3QixpQ0FBYSxHQUFHLG9CQUFvQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFuZGxlIH0gZnJvbSAnLi4vaGVscGVyL2F3cy1lcnJvci1oYW5kbGVyJztcbmltcG9ydCAqIGFzIEFXUyBmcm9tICdhd3Mtc2RrJztcbmltcG9ydCB7IEF3c1Byb3ZpZGVyIH0gZnJvbSAnLi4vaGVscGVyL2F3cy1wcm92aWRlcic7XG5pbXBvcnQgeyBSZXNvdXJjZSB9IGZyb20gJ0BkZWVwbGludC9kZWVwc2Nhbm5lci1iYXNlJztcbmltcG9ydCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5cbmV4cG9ydCBjbGFzcyBFQzJJbnN0YW5jZVByb3ZpZGVyIGV4dGVuZHMgQXdzUHJvdmlkZXIge1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFJFU09VUkNFX1RZUEUgPSAnYXdzOjplYzI6Omluc3RhbmNlJztcblxuICBwdWJsaWMgYXN5bmMgY29sbGVjdChjb250ZXh0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9KTogUHJvbWlzZTxSZXNvdXJjZVtdPiB7XG4gICAgcmV0dXJuIHRoaXMubGlzdEFsbEluc3RhbmNlKGNvbnRleHQpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBsaXN0QWxsSW5zdGFuY2UoY29udGV4dDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSk6IFByb21pc2U8UmVzb3VyY2VbXT4ge1xuICAgIGNvbnN0IHJlc3VsdDogUmVzb3VyY2VbXSA9IFtdO1xuICAgIGNvbnN0IHNlcnZpY2VOYW1lID0gJ0VDMic7XG4gICAgY29uc3QgcmVnaW9ucyA9IF8uaGFzKGNvbnRleHQsICdpbnB1dHMucmVnaW9ucycpID8gY29udGV4dC5pbnB1dHMucmVnaW9ucyA6IHRoaXMuZ2V0UmVnaW9ucyhzZXJ2aWNlTmFtZSk7XG4gICAgdHJ5IHtcbiAgICAgIGZvciAoY29uc3QgcmVnaW9uIG9mIHJlZ2lvbnMpIHtcbiAgICAgICAgY29uc3QgZWMyID0gdGhpcy5nZXRDbGllbnQoc2VydmljZU5hbWUsIHJlZ2lvbikgYXMgQVdTLkVDMjtcbiAgICAgICAgY29uc3QgZWMySW5zdGFuY2VEYXRhOiBBV1MuRUMyLkRlc2NyaWJlSW5zdGFuY2VzUmVzdWx0ID0gYXdhaXQgZWMyLmRlc2NyaWJlSW5zdGFuY2VzKCkucHJvbWlzZSgpO1xuICAgICAgICBpZiAoZWMySW5zdGFuY2VEYXRhICYmIGVjMkluc3RhbmNlRGF0YS5SZXNlcnZhdGlvbnMpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IHJlc2VydmF0aW9ucyBvZiBlYzJJbnN0YW5jZURhdGEuUmVzZXJ2YXRpb25zKSB7XG4gICAgICAgICAgICBpZiAocmVzZXJ2YXRpb25zLkluc3RhbmNlcykge1xuICAgICAgICAgICAgICBmb3IgKGNvbnN0IGluc3RhbmNlIG9mIHJlc2VydmF0aW9ucy5JbnN0YW5jZXMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgICBuYW1lOiBpbnN0YW5jZS5JbnN0YW5jZUlkID8gaW5zdGFuY2UuSW5zdGFuY2VJZCA6ICcnLFxuICAgICAgICAgICAgICAgICAgdHlwZTogRUMySW5zdGFuY2VQcm92aWRlci5SRVNPVVJDRV9UWVBFLFxuICAgICAgICAgICAgICAgICAgbWV0YToge1xuICAgICAgICAgICAgICAgICAgICByZWdpb246IHJlZ2lvbixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmluc3RhbmNlLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBoYW5kbGUoZXJyb3IpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG4iXX0=